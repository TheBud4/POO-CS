// <auto-generated />
using System;
using Biblioteca.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteca.Migrations
{
    [DbContext(typeof(BibliotecaDbContext))]
    [Migration("20240823203420_Criando-Banco")]
    partial class CriandoBanco
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Biblioteca.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("Biblioteca.Models.AutorLivro", b =>
                {
                    b.Property<int>("CodAutor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodLivro")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Principal")
                        .HasColumnType("INTEGER");

                    b.HasKey("CodAutor", "CodLivro");

                    b.HasIndex("CodLivro");

                    b.ToTable("AutorLivros");
                });

            modelBuilder.Entity("Biblioteca.Models.Bairro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bairros");
                });

            modelBuilder.Entity("Biblioteca.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SalarioBase")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Biblioteca.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Biblioteca.Models.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("Biblioteca.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CodBairro")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodCidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodEndereco")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PrazoDevol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CodBairro");

                    b.HasIndex("CodCidade");

                    b.HasIndex("CodEndereco");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Biblioteca.Models.Editora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodBairro")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodCidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodEndereco")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CodBairro");

                    b.HasIndex("CodCidade");

                    b.HasIndex("CodEndereco");

                    b.ToTable("Editoras");
                });

            modelBuilder.Entity("Biblioteca.Models.Emprestimo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodFuncionario")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CodFuncionario");

                    b.ToTable("Emprestimos");
                });

            modelBuilder.Entity("Biblioteca.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Biblioteca.Models.Exemplar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdLivro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LivCodigo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LivCodigo");

                    b.ToTable("Exemplares");
                });

            modelBuilder.Entity("Biblioteca.Models.ExemplarEmprestimo", b =>
                {
                    b.Property<int>("CodExemplar")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodEmprestimo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DtDevolucao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DtPrevDevolucao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DtPrevMulta")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorMulta")
                        .HasColumnType("TEXT");

                    b.HasKey("CodExemplar", "CodEmprestimo");

                    b.HasIndex("CodEmprestimo");

                    b.ToTable("ExemplarEmprestimos");
                });

            modelBuilder.Entity("Biblioteca.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CodBairro")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodCargo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodCidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodEndereco")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CodBairro");

                    b.HasIndex("CodCargo");

                    b.HasIndex("CodCidade");

                    b.HasIndex("CodEndereco");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("Biblioteca.Models.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ano")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CatCodigo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodBarras")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodCategoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Edicao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PrazoMaximo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CatCodigo");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("Biblioteca.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodCliente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodFuncionario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodLivro")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CodCliente");

                    b.HasIndex("CodFuncionario");

                    b.HasIndex("CodLivro");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Biblioteca.Models.AutorLivro", b =>
                {
                    b.HasOne("Biblioteca.Models.Autor", "Autor")
                        .WithMany("AutorLivros")
                        .HasForeignKey("CodAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Livro", "Livro")
                        .WithMany("AutorLivros")
                        .HasForeignKey("CodLivro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("Biblioteca.Models.Cliente", b =>
                {
                    b.HasOne("Biblioteca.Models.Bairro", "Bairro")
                        .WithMany("Clientes")
                        .HasForeignKey("CodBairro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Cidade", "Cidade")
                        .WithMany("Clientes")
                        .HasForeignKey("CodCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Endereco", "Endereco")
                        .WithMany("Clientes")
                        .HasForeignKey("CodEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Biblioteca.Models.Editora", b =>
                {
                    b.HasOne("Biblioteca.Models.Bairro", "Bairro")
                        .WithMany("Editoras")
                        .HasForeignKey("CodBairro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Cidade", "Cidade")
                        .WithMany("Editoras")
                        .HasForeignKey("CodCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Endereco", "Endereco")
                        .WithMany("Editoras")
                        .HasForeignKey("CodEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Biblioteca.Models.Emprestimo", b =>
                {
                    b.HasOne("Biblioteca.Models.Funcionario", "Funcionario")
                        .WithMany("Emprestimos")
                        .HasForeignKey("CodFuncionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("Biblioteca.Models.Exemplar", b =>
                {
                    b.HasOne("Biblioteca.Models.Livro", "Livro")
                        .WithMany("Exemplares")
                        .HasForeignKey("LivCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("Biblioteca.Models.ExemplarEmprestimo", b =>
                {
                    b.HasOne("Biblioteca.Models.Emprestimo", "Emprestimo")
                        .WithMany("ExemplarEmprestimos")
                        .HasForeignKey("CodEmprestimo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Exemplar", "Exemplar")
                        .WithMany("ExemplarEmprestimos")
                        .HasForeignKey("CodExemplar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emprestimo");

                    b.Navigation("Exemplar");
                });

            modelBuilder.Entity("Biblioteca.Models.Funcionario", b =>
                {
                    b.HasOne("Biblioteca.Models.Bairro", "Bairro")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CodBairro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Cargo", "Cargo")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CodCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Cidade", "Cidade")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CodCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Endereco", "Endereco")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CodEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bairro");

                    b.Navigation("Cargo");

                    b.Navigation("Cidade");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Biblioteca.Models.Livro", b =>
                {
                    b.HasOne("Biblioteca.Models.Categoria", "Categoria")
                        .WithMany("Livros")
                        .HasForeignKey("CatCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Biblioteca.Models.Reserva", b =>
                {
                    b.HasOne("Biblioteca.Models.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("CodCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Funcionario", "Funcionario")
                        .WithMany("Reservas")
                        .HasForeignKey("CodFuncionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Models.Livro", "Livro")
                        .WithMany("Reservas")
                        .HasForeignKey("CodLivro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Funcionario");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("Biblioteca.Models.Autor", b =>
                {
                    b.Navigation("AutorLivros");
                });

            modelBuilder.Entity("Biblioteca.Models.Bairro", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Editoras");

                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Biblioteca.Models.Cargo", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Biblioteca.Models.Categoria", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Biblioteca.Models.Cidade", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Editoras");

                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Biblioteca.Models.Cliente", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Biblioteca.Models.Emprestimo", b =>
                {
                    b.Navigation("ExemplarEmprestimos");
                });

            modelBuilder.Entity("Biblioteca.Models.Endereco", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Editoras");

                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Biblioteca.Models.Exemplar", b =>
                {
                    b.Navigation("ExemplarEmprestimos");
                });

            modelBuilder.Entity("Biblioteca.Models.Funcionario", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Biblioteca.Models.Livro", b =>
                {
                    b.Navigation("AutorLivros");

                    b.Navigation("Exemplares");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
